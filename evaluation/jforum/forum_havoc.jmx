<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12.20150413">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="JF Havoc" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(ITERATIONS,250)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1448338375000</longProp>
        <longProp name="ThreadGroup.end_time">1448338375000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Runtime Controller" enabled="true">
          <stringProp name="RunTime.seconds">1</stringProp>
        </RunTime>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">ctx.getVariables().putObject(&quot;staccato.rand&quot;, new Random(ctx.getThread().getThreadNum()));
ctx.getVariables().putObject(&quot;staccato.group24&quot;, new String[]{&quot;images/icon_clip.gif&quot;, &quot;images/icon_wink.gif&quot;});
ctx.getVariables().putObject(&quot;staccato.group13&quot;, new String[]{&quot;6050&quot;, &quot;6051&quot;});
ctx.getVariables().putObject(&quot;staccato.group20&quot;, new String[]{&quot;mail/de_DE/activateAccount.txt&quot;, &quot;mail/activateAccount.txt&quot;});
ctx.getVariables().putObject(&quot;staccato.group18&quot;, new String[]{&quot;mail/de_DE/newPrivateMessage.txt&quot;, &quot;mail/newPrivateMessage.txt&quot;});
ctx.getVariables().putObject(&quot;staccato.group3&quot;, new String[]{&quot;wbtdjiskxp&quot;, &quot;diqsgzczsy&quot;, &quot;jmphpwquwz&quot;, &quot;ozsqyolwdz&quot;});
ctx.getVariables().putObject(&quot;staccato.group15&quot;, new String[]{&quot;password&quot;, &quot;password1&quot;});
ctx.getVariables().putObject(&quot;staccato.group5&quot;, new String[]{&quot;epnxusqryb&quot;, &quot;qngfxtbrvt&quot;, &quot;enspajomsn&quot;});
ctx.getVariables().putObject(&quot;staccato.group23&quot;, new String[]{&quot;swcmzkvwqw&quot;, &quot;sppacucwtc&quot;});
ctx.getVariables().putObject(&quot;staccato.group4&quot;, new String[]{&quot;vsuszwuwlb&quot;, &quot;ujbuevkgex&quot;, &quot;aiusuhuikx&quot;, &quot;bpyqrzovpn&quot;});
ctx.getVariables().putObject(&quot;staccato.group16&quot;, new String[]{&quot;mail/de_DE/mailNewReply.txt&quot;, &quot;mail/mailNewReply.txt&quot;});
ctx.getVariables().putObject(&quot;staccato.group11&quot;, new String[]{&quot;admin@jforum.net&quot;, &quot;server@jforum.net&quot;, &quot;bar@localhost&quot;});
ctx.getVariables().putObject(&quot;staccato.group17&quot;, new String[]{&quot;NEW ANSWER!!11&quot;, &quot;NEW ANSWER&quot;});
ctx.getVariables().putObject(&quot;staccato.group19&quot;, new String[]{&quot;NEW PM!1!&quot;, &quot;NEW PM&quot;});
ctx.getVariables().putObject(&quot;staccato.group2&quot;, new String[]{&quot;http://localhost:8080/jforum-2.1.8/&quot;, &quot;http://staccato:8080/jforum-2.1.8/&quot;});
ctx.getVariables().putObject(&quot;staccato.group6&quot;, new String[]{&quot;vivwwiweoj&quot;, &quot;feoxmxieuy&quot;, &quot;vbfydylopz&quot;});
ctx.getVariables().putObject(&quot;staccato.group10&quot;, new String[]{&quot;UTF-8&quot;, &quot;US-ASCII&quot;});
ctx.getVariables().putObject(&quot;staccato.group12&quot;, new String[]{&quot;localhost&quot;, &quot;staccato&quot;});
ctx.getVariables().putObject(&quot;staccato.group22&quot;, new String[]{&quot;mail/de_DE/lostPassword.txt&quot;, &quot;mail/lostPassword.txt&quot;});
ctx.getVariables().putObject(&quot;staccato.group14&quot;, new String[]{&quot;username&quot;, &quot;fizzbizz&quot;});
ctx.getVariables().putObject(&quot;staccato.group8&quot;, new String[]{&quot;0&quot;, &quot;100&quot;, &quot;1000&quot;});
ctx.getVariables().putObject(&quot;staccato.group9&quot;, new String[]{&quot;u, a, img, i, u, li, ul, font, br, p, b, hr&quot;, &quot;u, a, img, i, u, li, ul, font, br&quot;});
ctx.getVariables().putObject(&quot;staccato.group21&quot;, new String[]{&quot;dwytinryrf&quot;, &quot;bxoytvkvna&quot;});
ctx.getVariables().putObject(&quot;staccato.group7&quot;, new String[]{&quot;UTF-8&quot;, &quot;US-ASCII&quot;});
ctx.getVariables().putObject(&quot;staccato.group1&quot;, new String[]{&quot;http://localhost:8080/jforum-2.1.8/&quot;, &quot;http://staccato:8080/jforum-2.1.8/&quot;});
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="module" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">user</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">module</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="action" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">validateLogin</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">action</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Admin</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">foobar</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/jforum-2.1.8/jforum.page</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="havoc" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">r = ctx.getVariables().getObject(&quot;staccato.rand&quot;);
controller_id = 1;
/*if(controller_id == 0) {
	sampler.setPath(&quot;/jforum-2.1.8/jforum.page&quot;);
	sampler.addArgument(&quot;p_attachments.images.thumb.maxsize.w&quot;, (r.nextInt(51) + 150) + &quot;&quot;);
	sampler.addArgument(&quot;p_attachments.max.post&quot;, (r.nextInt(3) + 1) + &quot;&quot;);
	sampler.addArgument(&quot;module&quot;, &quot;adminAttachments&quot;);
	sampler.addArgument(&quot;p_attachments.images.thumb.box.show&quot;, r.nextBoolean() ? &quot;true&quot; : &quot;false&quot;);
	sampler.addArgument(&quot;p_attachments.icon&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group24&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;action&quot;, &quot;configurationsSave&quot;);
	sampler.addArgument(&quot;p_attachments.images.thumb.maxsize.h&quot;, (r.nextInt(51) + 150) + &quot;&quot;);
	sampler.addArgument(&quot;p_attachments.images.createthumb&quot;, r.nextBoolean() ? &quot;true&quot; : &quot;false&quot;);
}*/
if(controller_id == 1) {
	sampler.setPath(&quot;/jforum-2.1.8/jforum.page&quot;);
	sampler.addArgument(&quot;p_rss.enabled&quot;, r.nextBoolean() ? &quot;true&quot; : &quot;false&quot;);
	sampler.addArgument(&quot;p_captcha.registration&quot;, r.nextBoolean() ? &quot;true&quot; : &quot;false&quot;);
	sampler.addArgument(&quot;p_mail.smtp.port&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group13&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_mail.activationKey.messageFile&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group20&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_mail.newPm.messageFile&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group18&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_i18n.board.default&quot;, r.nextBoolean() ? &quot;pt_BR&quot; : &quot;pt_PT&quot;);
	sampler.addArgument(&quot;p_forum.name&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group3&quot;))[r.nextInt(4)]);
	sampler.addArgument(&quot;module&quot;, &quot;adminConfig&quot;);
	sampler.addArgument(&quot;p_hot.topic.begin&quot;, (r.nextInt(16) + 15) + &quot;&quot;);
	sampler.addArgument(&quot;p_usersPerPage&quot;, (r.nextInt(31) + 30) + &quot;&quot;);
	sampler.addArgument(&quot;p_mail.smtp.password&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group15&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_forum.page.metatag.keywords&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group5&quot;))[r.nextInt(3)]);
	sampler.addArgument(&quot;p_mail.smtp.ssl&quot;, r.nextBoolean() ? &quot;false&quot; : &quot;true&quot;);
	sampler.addArgument(&quot;p_mail.lostPassword.subject&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group23&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_postsPerPage&quot;, (r.nextInt(16) + 15) + &quot;&quot;);
	sampler.addArgument(&quot;p_forum.page.title&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group4&quot;))[r.nextInt(4)]);
	sampler.addArgument(&quot;p_mail.newAnswer.messageFile&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group16&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_registration.enabled&quot;, r.nextBoolean() ? &quot;true&quot; : &quot;false&quot;);
	sampler.addArgument(&quot;p_mail.sender&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group11&quot;))[r.nextInt(3)]);
	sampler.addArgument(&quot;thumbH&quot;, &quot;150&quot;);
	sampler.addArgument(&quot;thumbW&quot;, &quot;150&quot;);
	sampler.addArgument(&quot;p_mail.newAnswer.subject&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group17&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_mail.newPm.subject&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group19&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_mail.user.email.auth&quot;, r.nextBoolean() ? &quot;false&quot; : &quot;true&quot;);
	sampler.addArgument(&quot;p_homepage.link&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group2&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_topic.recent&quot;, (r.nextInt(11) + 20) + &quot;&quot;);
	sampler.addArgument(&quot;p_forum.page.metatag.description&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group6&quot;))[r.nextInt(3)]);
	sampler.addArgument(&quot;p_avatar.maxHeight&quot;, (r.nextInt(51) + 150) + &quot;&quot;);
	sampler.addArgument(&quot;p_posts.cache.size&quot;, (r.nextInt(51) + 100) + &quot;&quot;);
	sampler.addArgument(&quot;p_mail.charset&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group10&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_mail.smtp.host&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group12&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_mail.lostPassword.messageFile&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group22&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_posts.cache.enabled&quot;, r.nextBoolean() ? &quot;true&quot; : &quot;false&quot;);
	sampler.addArgument(&quot;p_mail.smtp.username&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group14&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_posts.new.delay&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group8&quot;))[r.nextInt(3)]);
	sampler.addArgument(&quot;p_html.tags.welcome&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group9&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_mail.notify.answers&quot;, r.nextBoolean() ? &quot;false&quot; : &quot;true&quot;);
	sampler.addArgument(&quot;p_mail.messageFormat&quot;, r.nextBoolean() ? &quot;text&quot; : &quot;html&quot;);
	sampler.addArgument(&quot;p_avatar.maxWidth&quot;, (r.nextInt(51) + 150) + &quot;&quot;);
	sampler.addArgument(&quot;p_mail.activationKey.subject&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group21&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_mail.smtp.auth&quot;, r.nextBoolean() ? &quot;false&quot; : &quot;true&quot;);
	sampler.addArgument(&quot;p_encoding&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group7&quot;))[r.nextInt(2)]);
	sampler.addArgument(&quot;p_topicsPerPage&quot;, (r.nextInt(16) + 15) + &quot;&quot;);
	sampler.addArgument(&quot;p_avatarMaxKbSize&quot;, (r.nextInt(6) + 5) + &quot;&quot;);
	sampler.addArgument(&quot;action&quot;, &quot;editSave&quot;);
	sampler.addArgument(&quot;p_forum.link&quot;, ((String[])ctx.getVariables().getObject(&quot;staccato.group1&quot;))[r.nextInt(2)]);
}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">r = ctx.getVariables().getObject(&quot;staccato.rand&quot;);
a = r.nextInt(500);
return a;
</stringProp>
          </BeanShellTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
